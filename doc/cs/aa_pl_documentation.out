\BOOKMARK [1][-]{section*.2}{Abstract}{}% 1
\BOOKMARK [1][-]{section*.4}{Using the Virtual Machine}{}% 2
\BOOKMARK [1][-]{section*.7}{Parsing}{}% 3
\BOOKMARK [2][-]{section*.9}{Lexical Analysis}{section*.7}% 4
\BOOKMARK [2][-]{section*.12}{Parse tree \(PT\)}{section*.7}% 5
\BOOKMARK [3][-]{section*.14}{First Pass}{section*.12}% 6
\BOOKMARK [3][-]{section*.16}{Second Pass}{section*.12}% 7
\BOOKMARK [3][-]{section*.19}{Third Pass}{section*.12}% 8
\BOOKMARK [2][-]{section*.21}{Abstract Syntax Tree \(AST\)}{section*.7}% 9
\BOOKMARK [3][-]{section*.23}{Expanding the AST}{section*.21}% 10
\BOOKMARK [3][-]{section*.25}{Simplifying the AST}{section*.21}% 11
\BOOKMARK [1][-]{section*.27}{Static Analysis}{}% 12
\BOOKMARK [2][-]{section*.29}{Type declarations}{section*.27}% 13
\BOOKMARK [2][-]{section*.31}{Function Matching}{section*.27}% 14
\BOOKMARK [2][-]{section*.33}{Building Inheritance Trees}{section*.27}% 15
\BOOKMARK [2][-]{section*.35}{Control path verification}{section*.27}% 16
\BOOKMARK [1][-]{section*.37}{Type System}{}% 17
\BOOKMARK [2][-]{section*.39}{Static Type Environment}{section*.37}% 18
\BOOKMARK [2][-]{section*.41}{Dynamic Type Environment}{section*.37}% 19
\BOOKMARK [2][-]{section*.43}{Typechecking}{section*.37}% 20
\BOOKMARK [1][-]{section*.45}{Evaluation of Code}{}% 21
\BOOKMARK [2][-]{section*.47}{Environment Operators}{section*.45}% 22
\BOOKMARK [2][-]{section*.50}{Literals}{section*.45}% 23
\BOOKMARK [2][-]{section*.53}{Arithmetic Operators}{section*.45}% 24
\BOOKMARK [2][-]{section*.56}{Logic Operations}{section*.45}% 25
\BOOKMARK [2][-]{section*.61}{Declarative Operations}{section*.45}% 26
\BOOKMARK [2][-]{section*.65}{Functional Operations}{section*.45}% 27
\BOOKMARK [2][-]{section*.68}{Class Specific Operations}{section*.45}% 28
\BOOKMARK [2][-]{section*.71}{Enum Specific Operations}{section*.45}% 29
\BOOKMARK [2][-]{section*.74}{Flow Control Operations}{section*.45}% 30
\BOOKMARK [1][-]{section*.77}{Internals of the Virtual Machine}{}% 31
\BOOKMARK [2][-]{section*.79}{Executing bytecode}{section*.77}% 32
\BOOKMARK [2][-]{section*.81}{The operand and call stacks}{section*.77}% 33
\BOOKMARK [2][-]{section*.83}{The Ref Value Environment}{section*.77}% 34
\BOOKMARK [2][-]{section*.85}{The Garbage Collector}{section*.77}% 35
\BOOKMARK [1][-]{section*.87}{Compiler}{}% 36
\BOOKMARK [2][-]{section*.89}{Compiling the AST}{section*.87}% 37
\BOOKMARK [3][-]{section*.91}{AST to Bytecode Flowchart}{section*.89}% 38
\BOOKMARK [2][-]{section*.94}{Verifying \305 Bytecode}{section*.87}% 39
\BOOKMARK [1][-]{section*.96}{Structure of an \305-binary file}{}% 40
\BOOKMARK [1][-]{section*.98}{Appendix}{}% 41
\BOOKMARK [2][-]{section*.100}{Appendix 1: Complete Overview of Grammar}{section*.98}% 42
\BOOKMARK [2][-]{section*.102}{Appendix 2: Complete Overview of Operational Semantics}{section*.98}% 43
\BOOKMARK [2][-]{section*.106}{Appendix 3: Complete Overview of Typing Rules}{section*.98}% 44
\BOOKMARK [2][-]{section*.110}{Appendix 4: Complete Overview of Compile Errors}{section*.98}% 45
\BOOKMARK [2][-]{section*.112}{Appendix 5: Complete Overview of Instruction List}{section*.98}% 46
\BOOKMARK [2][-]{section*.114}{Appendix 6: Complete operator list}{section*.98}% 47
\BOOKMARK [2][-]{section*.116}{Appendix 7: Complete keyword list}{section*.98}% 48
